# pipelinerunner.py
"""
Pipeline runner simplificado - sem Factory Pattern.
Sistema plug-and-play que funciona sem configura√ß√µes obrigat√≥rias.
"""

import sys
import logging
from pathlib import Path

# Setup do projeto
project_root = Path.cwd()
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

from src.managers.file_manager import FileTypeManager


def get_directories():
    """
    Define diret√≥rios de entrada e sa√≠da.
    Tenta usar configura√ß√µes se dispon√≠veis, sen√£o usa padr√µes.
    """
    try:
        # Tenta importar configura√ß√µes se existem
        from config.settings import INPUT_DIR, OUTPUT_DIR
        return INPUT_DIR, OUTPUT_DIR
    except ImportError:
        # Usa diret√≥rios padr√£o se config n√£o existe
        logging.info("Configura√ß√µes n√£o encontradas, usando diret√≥rios padr√£o")
        project_root = Path.cwd()
        input_dir = project_root / "data" / "input"
        output_dir = project_root / "data" / "output"

        # Cria diret√≥rios se n√£o existem
        input_dir.mkdir(parents=True, exist_ok=True)
        output_dir.mkdir(parents=True, exist_ok=True)

        return input_dir, output_dir


def main():
    """Fun√ß√£o principal do pipeline."""

    logging.info("üöÄ Iniciando Pipeline de Extra√ß√£o de Documentos")
    logging.info("=" * 60)

    # ‚úÖ Obter diret√≥rios (configurado ou padr√£o)
    input_dir, output_dir = get_directories()
    logging.info(f"üìÇ Diret√≥rio de entrada: {input_dir}")
    logging.info(f"üìÇ Diret√≥rio de sa√≠da: {output_dir}")

    # ‚úÖ Criar manager simplificado (auto-registra extractors)
    manager = FileTypeManager()

    # ‚úÖ Log das extens√µes suportadas (sem factory)
    supported_extensions = manager.get_supported_extensions()
    logging.info(f"üîß Extens√µes suportadas: {', '.join(supported_extensions)}")

    if not supported_extensions:
        logging.error("‚ùå Nenhum extractor dispon√≠vel! Verifique instala√ß√£o das depend√™ncias.")
        return False

    logging.info("\n" + "=" * 60)

    # ‚úÖ Verificar se diret√≥rio de entrada existe e tem arquivos
    if not input_dir.exists():
        logging.warning(f"‚ö†Ô∏è  Diret√≥rio de entrada n√£o existe: {input_dir}")
        logging.info(f"üí° Criando diret√≥rio: {input_dir}")
        input_dir.mkdir(parents=True, exist_ok=True)
        logging.info(f"üìù Coloque arquivos para processar em: {input_dir}")
        return True

    # ‚úÖ Listar todos os arquivos no diret√≥rio
    all_files = [f for f in input_dir.iterdir() if f.is_file()]

    if not all_files:
        logging.warning(f"‚ö†Ô∏è  Diret√≥rio de entrada vazio: {input_dir}")
        logging.info(f"üìù Coloque arquivos (.pdf, .docx, .csv, .xlsx) em: {input_dir}")
        return True

    # ‚úÖ Separar arquivos suportados e n√£o suportados
    supported_files = [f for f in all_files if manager.is_supported(f)]
    unsupported_files = [f for f in all_files if not manager.is_supported(f)]

    # ‚úÖ Log estat√≠sticas iniciais
    logging.info(f"üìä Estat√≠sticas dos arquivos:")
    logging.info(f"   Total de arquivos: {len(all_files)}")
    logging.info(f"   Arquivos suportados: {len(supported_files)}")
    logging.info(f"   Arquivos n√£o suportados: {len(unsupported_files)}")

    if unsupported_files:
        logging.info(f"üö´ Arquivos n√£o suportados:")
        for file in unsupported_files:
            logging.info(f"      ‚Ä¢ {file.name} ({file.suffix})")

    if not supported_files:
        logging.warning("‚ö†Ô∏è  Nenhum arquivo suportado encontrado!")
        logging.info(f"üí° Extens√µes aceitas: {', '.join(supported_extensions)}")
        return True

    logging.info(f"\nüîÑ Iniciando processamento de {len(supported_files)} arquivos...")
    logging.info("=" * 60)

    # ‚úÖ Processar arquivos suportados
    results = {
        'success': [],
        'failed': [],
        'total_time': 0
    }

    import time
    start_time = time.time()

    for file_path in sorted(supported_files):
        file_start_time = time.time()

        logging.info(f"üìÑ Processando: {file_path.name}")

        try:
            success = manager.process_file(file_path, output_dir)
            file_time = time.time() - file_start_time

            if success:
                results['success'].append(file_path.name)
                logging.info(f"   ‚úÖ Sucesso ({file_time:.2f}s)")
                print(f"‚úÖ {file_path.name} processado com sucesso")
            else:
                results['failed'].append(file_path.name)
                logging.error(f"   ‚ùå Falha ({file_time:.2f}s)")
                print(f"‚ùå Falha ao processar: {file_path.name}")

        except Exception as e:
            results['failed'].append(file_path.name)
            logging.error(f"   üí• Erro inesperado: {e}")
            print(f"üí• Erro inesperado em {file_path.name}: {e}")

        print("-" * 50)

    results['total_time'] = time.time() - start_time

    # ‚úÖ Relat√≥rio final
    logging.info("\n" + "=" * 60)
    logging.info("üéâ Processamento conclu√≠do!")
    logging.info(f"üìÇ Resultados salvos em: {output_dir}")

    logging.info(f"\nüìä Relat√≥rio Final:")
    logging.info(f"   ‚úÖ Sucessos: {len(results['success'])}")
    logging.info(f"   ‚ùå Falhas: {len(results['failed'])}")
    logging.info(f"   ‚è±Ô∏è  Tempo total: {results['total_time']:.2f}s")
    logging.info(f"   üìà Taxa de sucesso: {len(results['success']) / len(supported_files):.1%}")

    if results['success']:
        logging.info(f"\n‚úÖ Arquivos processados com sucesso:")
        for filename in results['success']:
            logging.info(f"      ‚Ä¢ {filename}")

    if results['failed']:
        logging.info(f"\n‚ùå Arquivos com falha:")
        for filename in results['failed']:
            logging.info(f"      ‚Ä¢ {filename}")

    # ‚úÖ Dicas para melhorar resultados
    if results['failed']:
        logging.info(f"\nüí° Dicas para resolver falhas:")
        logging.info(f"   ‚Ä¢ Verifique se arquivos n√£o est√£o corrompidos")
        logging.info(f"   ‚Ä¢ Para PDFs escaneados, instale: pip install easyocr")
        logging.info(f"   ‚Ä¢ Verifique logs detalhados acima para erros espec√≠ficos")

    return len(results['success']) > 0


if __name__ == "__main__":
    try:
        success = main()
        exit_code = 0 if success else 1

        if success:
            print(f"\nüéâ Pipeline executado com sucesso!")
        else:
            print(f"\n‚ö†Ô∏è  Pipeline executado com problemas. Verifique logs acima.")

        sys.exit(exit_code)

    except KeyboardInterrupt:
        logging.info("\n\n‚èπÔ∏è  Pipeline interrompido pelo usu√°rio")
        print("\n‚èπÔ∏è  Processamento cancelado")
        sys.exit(1)

    except Exception as e:
        logging.error(f"\nüí• Erro cr√≠tico no pipeline: {e}")
        print(f"\nüí• Erro cr√≠tico: {e}")
        sys.exit(1)